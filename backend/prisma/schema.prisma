// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String
  cargo     String?
  setor     String?
  ativo     Boolean  @default(true)
  admin     Boolean  @default(false)
  podeVerTodosOrcamentos Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  usuarioNiveis UsuarioNivel[]
  orcamentos    Orcamento[]    @relation("Solicitante")
  aprovacoes    Aprovacao[]
  rejeicoes     Rejeicao[]
  fluxosUsuario FluxoUsuario[]

  // NOVO: Relação N:N para permissões de visualização de orçamentos
  usuariosPermitidos Usuario[] @relation("UsuariosPermitidos")
  podeVerMeusOrcamentosPor Usuario[] @relation("UsuariosPermitidos")

  @@map("usuarios")
}

model Nivel {
  id                  Int      @id @default(autoincrement())
  nome                String
  prioridade          Int      @unique
  podeCriarOrcamento  Boolean  @default(true)
  podeAprovar         Boolean  @default(false)
  nivelFinal          Boolean  @default(false)
  ativo               Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relacionamentos
  usuarioNiveis UsuarioNivel[]
  orcamentos    Orcamento[]    @relation("NivelAtual")
  proximoNivel  Orcamento[]    @relation("ProximoNivel")
  regrasOrigem  RegraFluxo[]   @relation("NivelOrigem")
  regrasDestino RegraFluxo[]   @relation("NivelDestino")
  fluxosUsuario FluxoUsuario[]

  @@map("niveis")
}

model UsuarioNivel {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  nivelId   Int
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  nivel   Nivel   @relation(fields: [nivelId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, nivelId])
  @@map("usuarios_niveis")
}

model Filial {
  id        Int      @id @default(autoincrement())
  nome      String
  endereco  String?
  telefone  String?
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  orcamentos Orcamento[]

  @@map("filiais")
}

model Orcamento {
  id              Int      @id @default(autoincrement())
  titulo          String
  descricao       String
  valor           Decimal  @db.Decimal(10, 2)
  quantidade      Int      @default(1)
  fornecedor      String?
  links           String?
  fotos           String?
  anexos          String?
  status          String   @default("PENDENTE") // PENDENTE, APROVADO, REPROVADO, AGUARDANDO_COMPRA, COMPRA_EFETUADA, FINALIZADO
  observacoes     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  dataCompra      DateTime?
  dataBaixa       DateTime?

  // Relacionamentos
  solicitanteId Int
  solicitante   Usuario @relation("Solicitante", fields: [solicitanteId], references: [id])
  
  filialId      Int
  filial        Filial @relation(fields: [filialId], references: [id])
  
  nivelAtualId  Int
  nivelAtual    Nivel  @relation("NivelAtual", fields: [nivelAtualId], references: [id])
  
  proximoNivelId Int?
  proximoNivel   Nivel? @relation("ProximoNivel", fields: [proximoNivelId], references: [id])

  aprovacoes Aprovacao[]
  rejeicoes  Rejeicao[]

  @@map("orcamentos")
}

model Aprovacao {
  id          Int      @id @default(autoincrement())
  orcamentoId Int
  aprovadorId Int
  observacoes String?
  createdAt   DateTime @default(now())

  // Relacionamentos
  orcamento Orcamento @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  aprovador Usuario   @relation(fields: [aprovadorId], references: [id])

  @@map("aprovacoes")
}

model Rejeicao {
  id          Int      @id @default(autoincrement())
  orcamentoId Int
  rejeitadorId Int
  motivo      String
  observacoes String?
  createdAt   DateTime @default(now())

  // Relacionamentos
  orcamento  Orcamento @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  rejeitador Usuario   @relation(fields: [rejeitadorId], references: [id])

  @@map("rejeicoes")
}

model RegraFluxo {
  id           Int      @id @default(autoincrement())
  nivelOrigemId Int
  nivelDestinoId Int
  ativo        Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  nivelOrigem  Nivel @relation("NivelOrigem", fields: [nivelOrigemId], references: [id])
  nivelDestino Nivel @relation("NivelDestino", fields: [nivelDestinoId], references: [id])

  @@unique([nivelOrigemId, nivelDestinoId])
  @@map("regras_fluxo")
}

model FluxoUsuario {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  ordem     Int      // ordem do nível no fluxo
  nivelId   Int
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  nivel     Nivel    @relation(fields: [nivelId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, ordem])
  @@map("fluxos_usuario")
} 